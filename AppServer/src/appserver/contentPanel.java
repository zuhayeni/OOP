/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appserver;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Zuhayeni
 */
public class contentPanel extends javax.swing.JPanel {

    private ServerSocket listener = null;
    private Thread socketThread;
    private int clientNumber = 0;
    private File myFile = null;
    FileInputStream fis = null;
    BufferedInputStream bis = null;
    OutputStream os = null;

    /**
     * Creates new form contentPanel
     */
    public contentPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        portButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();

        jLabel1.setText("PORT");

        jLabel2.setText(":");

        portButton.setText("BUKA PORT");
        portButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portButtonActionPerformed(evt);
            }
        });

        statusTextArea.setEditable(false);
        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 186, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(portButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void portButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portButtonActionPerformed
        // TODO add your handling code here:
        socketThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    while (true) {
                        new Capitalizer(listener.accept(), clientNumber++).start();
                    }
                } catch (Exception ex) {
                    System.out.println(ex);
                }
            }
        });
        try {
            listener = new ServerSocket(Integer.valueOf(portTextField.getText()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error:" + ex);
            System.exit(0);
        }
        socketThread.start();
        this.statusTextArea.setText("Server telah aktif.");
    }//GEN-LAST:event_portButtonActionPerformed

    private class Capitalizer extends Thread {

        private Socket socket;
        private int clientNumber;

        public Capitalizer(Socket socket, int clientNumber) {
            this.socket = socket;
            this.clientNumber = clientNumber;
            log("Koneksi baru dengan client ke-" + clientNumber + " pada " + socket);
        }

        /**
         * Services this thread's client by first sending the client a welcome
         * message then repeatedly reading strings and sending back the
         * capitalized version of the string.
         */
        public void run() {
            try {

                // Decorate the streams so we can send characters
                // and not just bytes.  Ensure output is flushed
                // after every newline.
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(socket.getInputStream()));
//                BufferedReader in = new BufferedReader(new FileReader(socket.getInputStream().toString()));
                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

                // Send a welcome message to the client.
                out.println("Hai, anda client ke-" + clientNumber + ".");
                out.println("Tekan ENTER atau (titik) untuk keluar");

                // Get messages from the client, line by line; return them
                // capitalized
                while (true) {
                    String input = in.readLine();
                    if (input == null) {
                        break;
                    }
                    if (input == "") { //default (no text)
                        break;
                    }
                    if (input.equals(".")) {
                        break;
                    } else if (input.equals("0")) {
                        out.println("Daftar File: ");
                        out.println("1. A.txt");
                        out.println("2. B.txt");
//                        input = "Daftar File: " + "\n" + "1. A.txt" + "\n"
//                                + "2. B.txt";
//                        out.println(input);
                    } else if (input.equals("1")) {
//                        new readFile(socket).start();
                        myFile = new File("a.txt");
                        byte[] mybytearray = new byte[(int) myFile.length()];
                        fis = new FileInputStream(myFile);
                        bis = new BufferedInputStream(fis);
                        try {
                            bis.read(mybytearray, 0, mybytearray.length);
                            bis.close();
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Integer lines = new String(mybytearray).split(System.getProperty("line.separator")).length;
                        out.println(lines.toString());
                        out.println(new String(mybytearray));
                        //os = this.socket.getOutputStream();
                        //os.write(mybytearray, 0, mybytearray.length);
                        //os.flush();
                    } else {
                        out.println(input);
                    }
                    log(input);
                }
            } catch (IOException e) {
                log("Error handling client# " + clientNumber + ": " + e);
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    log("Couldn't close a socket, what's going on?");
                }
                log("Connection with client# " + clientNumber + " closed");
            }
        }

        /**
         * Logs a simple message. In this case we just write the message to the
         * server applications standard output.
         */
        private void log(final String message) {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    statusTextArea.setText(statusTextArea.getText() + "\n" + message);
                }
            });
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton portButton;
    private javax.swing.JTextField portTextField;
    private javax.swing.JTextArea statusTextArea;
    // End of variables declaration//GEN-END:variables
}
